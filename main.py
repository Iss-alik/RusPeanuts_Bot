from aiogram import Bot, Dispatcher
from aiogram.types import *
from aiogram.filters import Command

import structural.adapter
import constans
import structural.what_num
from datetime import datetime
import random

# –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏
BOT_TOKEN = constans.TOKEN

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

delta =1 
global cur_num 
cur_num = structural.what_num.num_from_url(url=constans.BASE) # —Å—Ä–∞–∑—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç—Ä–∏–ø–∞ —Å acomics, –ø–æ—Ç–æ–º—É —á—Ç–æ /start –≤—ã–¥–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç—Ä–∏–ø
lst_num = cur_num

# –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
menu= [
[
    InlineKeyboardButton(text='‚è™', callback_data= 'first'),
    InlineKeyboardButton(text='‚óÄÔ∏è', callback_data= 'previous'),
    InlineKeyboardButton(text='üîÑ', callback_data= 'random'),
    InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data= 'next'),
    InlineKeyboardButton(text='‚è©', callback_data= 'last')
]
]
menu = InlineKeyboardMarkup(inline_keyboard=menu)


# –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ /start –∏ –≤—ã–¥–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç—Ä–∏–ø –Ω–∞ acomics
@dp.message(Command("start"))
async def start_handler(msg:Message):

    structural.adapter.url_to_square(url=constans.BASE)

    request = FSInputFile("request.png") # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª 
    issueName = structural.what_num.issueName(url=constans.BASE + '/' +str(cur_num)) # –î–æ—Å—Ç–∞–µ–º –¥–∞—Ç—É –≤—ã–ø—É—Å–∫–∞ —Å acomics
    await msg.answer_photo(request, reply_markup=menu, caption = issueName)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def process_button_press(query: CallbackQuery, bot: Bot):
    global cur_num

    if query.data == 'first':
        cur_num = 1

    elif  query.data == 'previous' and cur_num !=1:
        cur_num -= delta

    elif query.data == 'random':
        cur_num  = random.randint(1,lst_num+1)

    elif query.data == 'next' and cur_num != lst_num:
        cur_num += delta
        
    elif query.data == 'last':
        cur_num = lst_num
    
    structural.adapter.url_to_square(url=constans.BASE + '/' +str(cur_num)) # –î–æ—Å—Ç–∞–µ–º —Å—Ç—Ä–∏–ø —Å –Ω–æ–º–µ—Ä–æ–º = cur_num
    request = FSInputFile("request.png")
    issueName = structural.what_num.issueName(url=constans.BASE + '/' +str(cur_num)) # –î–æ—Å—Ç–∞–µ–º –¥–∞—Ç—É –≤—ã–ø—É—Å–∫–∞

    await query.message.answer_photo(request, reply_markup=menu, caption= issueName) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∏–ø
    await query.message.delete() # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 

@dp.message(Command("help"))
async def help(msg:Message):
    await msg.answer("/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, /date - –°—Ç—Ä–∏–ø –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ–π –¥–∞—Ç–µ, /bookmark - —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–ª–∞–¥–∫—É")

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def send_echo(message: Message):
    await message.answer(text='–ù–µ –ø–æ–Ω–∏–º–∞—é')


if __name__ == '__main__':
    dp.run_polling(bot)
